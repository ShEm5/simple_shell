#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

/**
 * execute_command - Execute the given command using execvp
 * @command: The command to execute
 * @args: Array of arguments including the command
 * Return: 0 on success, -1 on failure
 */
int execute_command(char *command, char **args)
{
pid_t pid;
int status;

pid = fork();
if (pid == 0)
{
if (execvp(command, args) == -1)
{
perror("execvp");
return -1;
}
}
else if (pid < 0)
{
perror("fork");
return -1;
}
else
{
do{
waitpid(pid, &status, WUNTRACED);
} while (!WIFEXITED(status) && !WIFSIGNALED(status));
}

return 0;
}

/**
 * main - Entry point of the shell program
 *
 * Return: Always 0
 */
int main(void)
{
char command[100];
char *args[100];
char *token;
int i;

while (1)
{
printf("Shell> ");
fgets(command, sizeof(command), stdin);
command[strcspn(command, "\n")] = 0;

if (strcmp(command, "exit") == 0)
break;

token = strtok(command, " ");
i = 0;
while (token != NULL)
{
args[i] = token;
token = strtok(NULL, " ");
i++;
}
args[i] = NULL;

if (execute_command(args[0], args) == -1)
printf("Command not found: %s\n", args[0]);
}

return 0;
}
